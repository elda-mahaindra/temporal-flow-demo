// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: flowngine.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FlowEngine_ExecuteTransfer_FullMethodName   = "/pb.FlowEngine/ExecuteTransfer"
	FlowEngine_GetTransferStatus_FullMethodName = "/pb.FlowEngine/GetTransferStatus"
	FlowEngine_CancelTransfer_FullMethodName    = "/pb.FlowEngine/CancelTransfer"
)

// FlowEngineClient is the client API for FlowEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FlowEngine service handles workflow orchestration
type FlowEngineClient interface {
	// ExecuteTransfer starts a transfer workflow
	ExecuteTransfer(ctx context.Context, in *ExecuteTransferRequest, opts ...grpc.CallOption) (*ExecuteTransferResponse, error)
	// GetTransferStatus gets the current status of a transfer
	GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, opts ...grpc.CallOption) (*GetTransferStatusResponse, error)
	// CancelTransfer attempts to cancel a pending transfer
	CancelTransfer(ctx context.Context, in *CancelTransferRequest, opts ...grpc.CallOption) (*CancelTransferResponse, error)
}

type flowEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowEngineClient(cc grpc.ClientConnInterface) FlowEngineClient {
	return &flowEngineClient{cc}
}

func (c *flowEngineClient) ExecuteTransfer(ctx context.Context, in *ExecuteTransferRequest, opts ...grpc.CallOption) (*ExecuteTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteTransferResponse)
	err := c.cc.Invoke(ctx, FlowEngine_ExecuteTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowEngineClient) GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, opts ...grpc.CallOption) (*GetTransferStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransferStatusResponse)
	err := c.cc.Invoke(ctx, FlowEngine_GetTransferStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowEngineClient) CancelTransfer(ctx context.Context, in *CancelTransferRequest, opts ...grpc.CallOption) (*CancelTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTransferResponse)
	err := c.cc.Invoke(ctx, FlowEngine_CancelTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowEngineServer is the server API for FlowEngine service.
// All implementations must embed UnimplementedFlowEngineServer
// for forward compatibility.
//
// FlowEngine service handles workflow orchestration
type FlowEngineServer interface {
	// ExecuteTransfer starts a transfer workflow
	ExecuteTransfer(context.Context, *ExecuteTransferRequest) (*ExecuteTransferResponse, error)
	// GetTransferStatus gets the current status of a transfer
	GetTransferStatus(context.Context, *GetTransferStatusRequest) (*GetTransferStatusResponse, error)
	// CancelTransfer attempts to cancel a pending transfer
	CancelTransfer(context.Context, *CancelTransferRequest) (*CancelTransferResponse, error)
	mustEmbedUnimplementedFlowEngineServer()
}

// UnimplementedFlowEngineServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlowEngineServer struct{}

func (UnimplementedFlowEngineServer) ExecuteTransfer(context.Context, *ExecuteTransferRequest) (*ExecuteTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTransfer not implemented")
}
func (UnimplementedFlowEngineServer) GetTransferStatus(context.Context, *GetTransferStatusRequest) (*GetTransferStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferStatus not implemented")
}
func (UnimplementedFlowEngineServer) CancelTransfer(context.Context, *CancelTransferRequest) (*CancelTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransfer not implemented")
}
func (UnimplementedFlowEngineServer) mustEmbedUnimplementedFlowEngineServer() {}
func (UnimplementedFlowEngineServer) testEmbeddedByValue()                    {}

// UnsafeFlowEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowEngineServer will
// result in compilation errors.
type UnsafeFlowEngineServer interface {
	mustEmbedUnimplementedFlowEngineServer()
}

func RegisterFlowEngineServer(s grpc.ServiceRegistrar, srv FlowEngineServer) {
	// If the following call pancis, it indicates UnimplementedFlowEngineServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FlowEngine_ServiceDesc, srv)
}

func _FlowEngine_ExecuteTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowEngineServer).ExecuteTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowEngine_ExecuteTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowEngineServer).ExecuteTransfer(ctx, req.(*ExecuteTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowEngine_GetTransferStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowEngineServer).GetTransferStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowEngine_GetTransferStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowEngineServer).GetTransferStatus(ctx, req.(*GetTransferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowEngine_CancelTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowEngineServer).CancelTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowEngine_CancelTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowEngineServer).CancelTransfer(ctx, req.(*CancelTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowEngine_ServiceDesc is the grpc.ServiceDesc for FlowEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FlowEngine",
	HandlerType: (*FlowEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTransfer",
			Handler:    _FlowEngine_ExecuteTransfer_Handler,
		},
		{
			MethodName: "GetTransferStatus",
			Handler:    _FlowEngine_GetTransferStatus_Handler,
		},
		{
			MethodName: "CancelTransfer",
			Handler:    _FlowEngine_CancelTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flowngine.proto",
}
