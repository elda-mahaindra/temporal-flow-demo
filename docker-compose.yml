services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      - POSTGRES_DB=temporal_flow_demo_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=changeme
    volumes:
      - postgres-data:/var/lib/postgresql/data/
      - ./_init/postgres:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - temporal-flow-demo
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d temporal_flow_demo_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Temporal services
  temporal-server:
    container_name: temporal-server
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PWD=changeme
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    image: temporalio/auto-setup:1.22.4
    networks:
      - temporal-flow-demo
    ports:
      - "7233:7233"
    volumes:
      - ./temporal-config:/etc/temporal/config/dynamicconfig
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "tctl",
          "--address",
          "temporal-server:7233",
          "cluster",
          "health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      temporal-server:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal-server:7233
      - TEMPORAL_CLI_ADDRESS=temporal-server:7233
    image: temporalio/admin-tools:1.22.4
    networks:
      - temporal-flow-demo
    stdin_open: true
    tty: true
    restart: unless-stopped

  temporal-ui:
    container_name: temporal-ui
    depends_on:
      temporal-server:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal-server:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:2.21.3
    networks:
      - temporal-flow-demo
    ports:
      - "8080:8080"
    restart: unless-stopped

  # Observability Services
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.45.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - temporal-flow-demo
    restart: unless-stopped

  grafana:
    container_name: grafana
    image: grafana/grafana:10.0.0
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - temporal-flow-demo
    depends_on:
      - prometheus
    restart: unless-stopped

  # Application Services
  svc-transaction:
    build: ./svc-transaction
    image: svc-transaction
    container_name: svc-transaction
    restart: unless-stopped
    volumes:
      - ./svc-transaction/config.json:/app/config.json
    depends_on:
      - postgres
      - temporal-server
    networks:
      - temporal-flow-demo
    ports:
      - "4010:4010" # REST API (health, failure-simulation, compensation-audit)
      - "8081:8080" # Metrics endpoint for Prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4010/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  svc-balance:
    build: ./svc-balance
    image: svc-balance
    container_name: svc-balance
    restart: unless-stopped
    volumes:
      - ./svc-balance/config.json:/app/config.json
    depends_on:
      - postgres
      - temporal-server
    networks:
      - temporal-flow-demo
    ports:
      - "4020:4020" # REST API (health, failure-simulation)
      - "8082:8080" # Metrics endpoint for Prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4020/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  flowngine:
    build: ./flowngine
    image: flowngine
    container_name: flowngine
    restart: unless-stopped
    ports:
      - "50051:50051"
      - "8083:8080" # Metrics endpoint
    volumes:
      - ./flowngine/config.json:/app/config.json
    depends_on:
      - svc-transaction
      - svc-balance
      - temporal-server
    networks:
      - temporal-flow-demo

  api-gateway:
    build: ./api-gateway
    image: api-gateway
    container_name: api-gateway
    restart: unless-stopped
    ports:
      - "4000:4000"
      - "8084:8080" # Metrics endpoint
    volumes:
      - ./api-gateway/config.json:/app/config.json
    depends_on:
      - flowngine
    networks:
      - temporal-flow-demo
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  temporal-flow-demo:
    driver: bridge
    name: temporal-flow-demo

volumes:
  postgres-data:
  prometheus-data:
  grafana-data:
